--- /home/rishabh/linux-linux-3.16.y/info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ /home/rishabh/working_dirct/info/sh_task_info.c	2019-09-29 18:42:47.404531192 +0530
@@ -0,0 +1,177 @@
+#include <linux/kernel.h>
+
+#include <linux/init.h>
+
+#include <linux/sched.h>
+
+#include <linux/syscalls.h>
+
+#include <linux/file.h> 
+
+#include <linux/fs.h>
+
+#include <linux/fcntl.h> 
+
+#include <asm/uaccess.h> 
+
+#include <uapi/asm-generic/errno-base.h>
+
+#include "taskinfo.h"
+
+
+
+void print_process(char* data,struct task_struct *task ){
+
+	printk("Process: %s\n", task->comm);
+
+	strcpy(data, "Process: ");
+
+	strcat(data, task->comm);
+
+	strcat(data, "\n");
+
+}
+
+
+
+
+
+void print_pid(char* data,char* concat,struct task_struct *task ){
+
+	printk("PID Number: %ld\n", (long)task->pid);
+
+	strcat(data, "PID NUmber: ");
+
+	sprintf(concat, "%ld\n", (long)task->pid);
+
+	strcat(data, concat);
+
+}
+
+
+
+void print_state(char* data,char* concat,struct task_struct *task ){
+
+	printk("Process State: %ld\n", (long)task->state);
+
+	strcat(data, "Process State: ");
+
+	sprintf(concat, "%ld\n", (long)task->state);
+
+	strcat(data, concat);
+
+}
+
+
+
+
+
+void print_priority(char* data,char* concat,struct task_struct *task ){
+
+	printk("Priority: %ld\n", (long)task->prio);
+
+	strcat(data, "Priority: ");
+
+	sprintf(concat, "%ld\n", (long)task->prio);
+
+	strcat(data, concat);
+
+
+
+	printk("RT_Priority: %ld\n", (long)task->rt_priority);
+
+	strcat(data, "RT_Priority: ");
+
+	sprintf(concat, "%ld\n", (long)task->rt_priority);
+
+	strcat(data, concat);
+
+	
+
+	printk("Static Priority: %ld\n", (long)task->static_prio);
+
+	strcat(data, "Static Priority: ");
+
+	sprintf(concat, "%ld\n", (long)task->static_prio);
+
+	strcat(data, concat);
+
+	
+
+	printk("Normal Priority: %ld\n", (long)task->normal_prio);
+
+	strcat(data, "Normal Priority: ");
+
+	sprintf(concat, "%ld\n", (long)task->normal_prio);
+
+	strcat(data, concat);
+
+}
+
+
+
+asmlinkage long sys_sh_task_info(int pid, char* filename) {
+
+
+
+	if (pid > 32768 || pid <= 0)
+
+		return -EINVAL;
+
+
+
+	char data[500], concat[500];
+
+	struct task_struct *task;
+
+	struct file *file;
+
+	struct pid *pid_struct;
+
+	int fd;
+
+	pid_struct = find_get_pid(pid);
+
+	task = pid_task(pid_struct,PIDTYPE_PID);
+
+        mm_segment_t old_fs = get_fs();
+
+  	set_fs(KERNEL_DS);
+
+
+
+	
+
+	print_process(data, task);
+
+
+
+	print_pid(data,concat,task);
+
+	
+
+	print_state(data,concat,task);
+
+	
+
+	print_priority(data,concat,task);
+
+	
+
+	fd = sys_open(filename, O_WRONLY|O_CREAT, 0644);
+
+	if (fd < 0)
+
+				return -EISDIR;
+
+
+
+	file->f_op->write(file, data, strlen(data), &file->f_pos);
+
+
+
+	set_fs(old_fs);
+
+	return 0;
+
+}
